/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// UserGroupPost struct for UserGroupPost
type UserGroupPost struct {
	// The resource's unique identifier.
	Id *string `json:"id"`
}

// NewUserGroupPost instantiates a new UserGroupPost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserGroupPost(id string) *UserGroupPost {
	this := UserGroupPost{}

	this.Id = &id

	return &this
}

// NewUserGroupPostWithDefaults instantiates a new UserGroupPost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserGroupPostWithDefaults() *UserGroupPost {
	this := UserGroupPost{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, nil is returned
func (o *UserGroupPost) GetId() *string {
	if o == nil {
		return nil
	}

	return o.Id

}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserGroupPost) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Id, true
}

// SetId sets field value
func (o *UserGroupPost) SetId(v string) {

	o.Id = &v

}

// HasId returns a boolean if a field has been set.
func (o *UserGroupPost) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

func (o UserGroupPost) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}

	return json.Marshal(toSerialize)
}

type NullableUserGroupPost struct {
	value *UserGroupPost
	isSet bool
}

func (v NullableUserGroupPost) Get() *UserGroupPost {
	return v.value
}

func (v *NullableUserGroupPost) Set(val *UserGroupPost) {
	v.value = val
	v.isSet = true
}

func (v NullableUserGroupPost) IsSet() bool {
	return v.isSet
}

func (v *NullableUserGroupPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserGroupPost(val *UserGroupPost) *NullableUserGroupPost {
	return &NullableUserGroupPost{value: val, isSet: true}
}

func (v NullableUserGroupPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserGroupPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
