# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

name: C/I
on:
  push:
    branches:
      - main
      - release/v*
      - dev
      - test*
    paths-ignore:
      - '.github/**'
      - '!.github/config/testcases.json'
      - '!.github/workflows/CI.yml'
      - '!.github/workflows/CI-Operator.yml'
      - '**.md'
      - 'tools/workflow/**'

  # from collector and contrib repo
  repository_dispatch:
    types: [dependency-build, workflow-run]

env:
  IMAGE_NAME: aws-otel-collector
  PACKAGING_ROOT: build/packages
  ECR_REPO: aws-otel-test/adot-collector-integration-test
  # TF_VAR_patch: 'true'
  PKG_SIGN_PRIVATE_KEY_NAME: aoc-linux-pkg-signing-gpg-key
  WIN_UNSIGNED_PKG_BUCKET: aoc-aws-signer-unsigned-artifact-src
  WIN_SIGNED_PKG_BUCKET: aoc-aws-signer-signed-artifact-dest
  WIN_UNSIGNED_PKG_FOLDER: OTelCollectorAuthenticode/AuthenticodeSigner-SHA256-RSA
  WIN_SIGNED_PKG_FOLDER: OTelCollectorAuthenticode/AuthenticodeSigner-SHA256-RSA
  SSM_PACKAGE_NAME: "testAWSDistroOTel-Collector"
  EKS_ARM_64_AMP_ENDPOINT: "https://aps-workspaces.us-west-2.amazonaws.com/workspaces/ws-e0c3c74f-7fdf-4e90-87d2-a61f52df40cd"
  EKS_ARM_64_CLUSTER_NAME: "collector-ci-arm64-1-21"
  EKS_ARM_64_REGION: "us-west-2"
  TESTING_FRAMEWORK_REPO: vasireddy99/aws-otel-test-framework
  GITHB_RUN_ID: ${{ github.run_id }}
  DDB_TABLE_NAME: BatchTestCache
  MAX_JOBS: 110
  BATCH_INCLUDED_SERVICES: EKS,ECS,EC2,EKS_ARM64,EKS_FARGATE
  GO_VERSION: ~1.22.10


concurrency:
  group: ci-batched${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

jobs:
  validate-markdown:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install markdown-link-check
        run: npm install -g markdown-link-check@3.12.2

      - name: Run markdown-link-check in the developers docs
        run: |
          find ./docs/developers -name "*.md" | xargs markdown-link-check \
            --verbose \
            --config .github/config/markdown-links-config.json \
            || { echo "Check that anchor links are lowercase"; exit 1; }
      - name: Run markdown-link-check on main documentation
        run: |
          markdown-link-check \
          --verbose \
          --config .github/config/markdown-links-config.json \
          README.md CONTRIBUTING.md CODE_OF_CONDUCT.md \
          || { echo "Check that anchor links are lowercase"; exit 1; } 

  create-test-ref:
    runs-on: ubuntu-22.04
    needs: validate-markdown
    outputs:
      testRef: ${{ steps.setRef.outputs.ref }}
    steps:
      - name: Set testRef output
        id: setRef
        run: |
          if [[ ${{ github.ref_name }} == release/v* ]]; then 
            echo "ref=${{github.ref_name}}" >> $GITHUB_OUTPUT
          else
            echo "ref=terraform" >> $GITHUB_OUTPUT
          fi

  build-aotutil:
    runs-on: ubuntu-22.04
    needs: create-test-ref
    steps:
      - name: Check out testing framework
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TESTING_FRAMEWORK_REPO }}
          path: testing-framework
          ref: testrpm
      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: testing-framework/cmd/aotutil/go.sum
      - name: Build aotutil
        run: cd testing-framework/cmd/aotutil && make build
      - name: Cache aotutil
        uses: actions/cache@v3
        with:
          key: "aotutil_${{ hashFiles('testing-framework/cmd/aotutil/*.go') }}_${{ hashFiles('testing-framework/cmd/aotutil/go.sum') }}"
          path: testing-framework/cmd/aotutil/aotutil

  build:
    needs:
      - create-test-ref
    runs-on: ubuntu-22.04

    steps:
    - name: Remove cache
      run: rm -rf /opt/hostedtoolcache

    - uses: actions/checkout@v4

    - name: apply patches
      run: make apply-patches

    # Set up building environment, patch the dev repo code on dispatch events.
    - name: Set up Go 1.x
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Checkout dev opentelemetry-collector-contrib
      if: github.event_name == 'repository_dispatch' && github.event.action == 'dependency-build'
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/opentelemetry-collector-contrib
        ref: main
        path: pkg/opentelemetry-collector-contrib

    - name: Checkout dev opentelemetry-collector
      if: github.event_name == 'repository_dispatch' && github.event.action == 'dependency-build'
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/opentelemetry-collector
        ref: main
        path: pkg/opentelemetry-collector

    - name: append replace statement to go.mod to build with dev repo
      if: github.event_name == 'repository_dispatch' && github.event.action == 'dependency-build'
      run: |
        echo "replace github.com/open-telemetry/opentelemetry-collector-contrib/exporter/awsxrayexporter => ./pkg/opentelemetry-collector-contrib/exporter/awsxrayexporter" >> go.mod
        echo "replace go.opentelemetry.io/collector => ./pkg/opentelemetry-collector" >> go.mod
        cat go.mod
        ls pkg

    - name: Cache binaries
      id: cached_binaries
      uses: actions/cache@v3
      with:
        key: "cached_binaries_${{ github.run_id }}"
        path: build

    # Unit Test and attach test coverage badge
    - name: Unit Test
      if: steps.cached_binaries.outputs.cache-hit != 'true'
      run: make gotest

    - name: Upload Coverage report to CodeCov
      if: steps.cached_binaries.outputs.cache-hit != 'true'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt


  packaging-msi:
    needs: build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4



  e2etest-preparation:
    runs-on: ubuntu-22.04
    needs: [packaging-msi]
    outputs:
      version: ${{ steps.versioning.outputs.version }}
    steps:
      # Archive all the packages into one, and build a unique version number for e2etesting
      - uses: actions/checkout@v4

      - name: Cache the packages
        id: cached_packages
        uses: actions/cache@v3
        with:
          key: "cached_packages_${{ github.run_id }}"
          path: "${{ env.PACKAGING_ROOT }}"


  e2etest-release:
    runs-on: ubuntu-22.04
    needs: [e2etest-preparation]
    steps:
      - uses: actions/checkout@v4


  get-testing-suites:
    runs-on: ubuntu-22.04
    needs: [create-test-ref]
    outputs:
      test-case-batch-key: ${{ steps.set-batches.outputs.batch-keys }}
      test-case-batch-value: ${{ steps.set-batches.outputs.batch-values }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TESTING_FRAMEWORK_REPO }}
          path: testing-framework
          ref: testrpm

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: '${{ github.repository }}'
          path: aws-otel-collector
          ref: ${{ github.ref_name }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: testing-framework/tools/batchTestGenerator/go.sum

      - name: Create test batch key values
        id: set-batches
        run: |
          cd testing-framework/tools/batchTestGenerator
          go build
          ./batchTestGenerator github --testCaseFilePath=$GITHUB_WORKSPACE/aws-otel-collector/.github/config/testcases.json --maxBatch=${{ env.MAX_JOBS }} \
            --include=${{ env.BATCH_INCLUDED_SERVICES }}
      - name: List testing suites
        run: |
          echo ${{ steps.set-batches.outputs.batch-keys }}
          echo ${{ steps.set-batches.outputs.batch-values }}

  run-batch-job:
    runs-on: ubuntu-22.04
    needs: [get-testing-suites, e2etest-release, e2etest-preparation, create-test-ref, build-aotutil]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.get-testing-suites.outputs.test-case-batch-key) }}

    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.5"

      - name: Configure AWS Credentials
        if: steps.e2etest-eks.outputs.cache-hit != 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.COLLECTOR_ASSUMABLE_ROLE_ARN }}
          aws-region: us-west-2
          # 6 hours
          role-duration-seconds: 21600

      - name: Checkout testing framework
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TESTING_FRAMEWORK_REPO }}
          path: testing-framework
          ref: testrpm

      - name: create test-case-batch file
        run: |
          jsonStr='${{ needs.get-testing-suites.outputs.test-case-batch-value }}'
          jsonStr="$(jq -r '.${{ matrix.BatchKey }} | join("\n")' <<< "${jsonStr}")"
          echo "$jsonStr" >> testing-framework/terraform/test-case-batch
          cat testing-framework/terraform/test-case-batch
      - name: Get TTL_DATE for cache
        id: date
        run: echo "ttldate=$(date -u -d "+7 days" +%s)" >> $GITHUB_OUTPUT

      - name: Restore aotutil
        uses: actions/cache@v3
        with:
          key: "aotutil_${{ hashFiles('testing-framework/cmd/aotutil/*.go') }}_${{ hashFiles('testing-framework/cmd/aotutil/go.sum') }}"
          path: testing-framework/cmd/aotutil/aotutil

      - name: run tests
        run: |
          export TTL_DATE=${{ steps.date.outputs.ttldate }}
          export TF_VAR_aoc_version=${{ needs.e2etest-preparation.outputs.version }}
          cd testing-framework/terraform
          make execute-batch-test

      - name: output cache misses
        if: ${{ failure() }}
        run: |
          export TF_VAR_aoc_version=${{ needs.e2etest-preparation.outputs.version }}
          cd testing-framework/terraform
          make checkCacheHits

      # This is here just in case workflow cancel
      # We first kill terraform processes to ensure that no state
      # file locks are being held from SIGTERMS dispatched in previous
      # steps.
      - name: Destroy resources
        if: ${{ cancelled() }}
        shell: bash {0}
        run: |
          ps -ef | grep terraform | grep -v grep | awk '{print $2}' | xargs -n 1 kill
          cd testing-framework/terraform
          make terraformCleanup

  run-collector-testbed:
    runs-on: ubuntu-22.04
    needs: [ e2etest-preparation, e2etest-release, create-test-ref]

    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.COLLECTOR_ASSUMABLE_ROLE_ARN }}
          aws-region: us-west-2
          # 6 hours
          role-duration-seconds: 21600

      - name: Login to Public Integration Test ECR
        uses: docker/login-action@v3
        with:
          registry: public.ecr.aws
        env:
          AWS_REGION: us-east-1

      - name: Checkout testing framework
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TESTING_FRAMEWORK_REPO }}
          path: testing-framework
          ref: testrpm

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Run tests
        run: |
          export TEST_IMAGE=public.ecr.aws/${{ env.ECR_REPO }}:${{ needs.e2etest-preparation.outputs.version }}
          cd testing-framework/adot-testbed
          ./gradlew test --rerun-tasks --info

  clean-ssm-package:
    runs-on: ubuntu-22.04
    if: ${{ always() && needs.e2etest-preparation.result == 'success' }}
    needs: [run-batch-job,e2etest-preparation]
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.COLLECTOR_ASSUMABLE_ROLE_ARN }}
          aws-region: us-west-2

      - name: restore cached packages
        id: cache_packages
        uses: actions/cache@v3
        with:
          path: "${{ env.PACKAGING_ROOT }}"
          key: "cached_packages_${{ github.run_id }}"

      - name: Get SSM package version
        id: versioning
        if: steps.cache_packages.outputs.cache-hit == 'true'
        run: |
          ssm_pkg_version=$(cat $PACKAGING_ROOT/VERSION)
          echo "ssm_pkg_version=$ssm_pkg_version" >> $GITHUB_OUTPUT
      - name: Rollback SSM default version
        if: steps.cache_packages.outputs.cache-hit == 'true'
        run: |
          ssm_package_name=${{ env.SSM_PACKAGE_NAME }} version=${{ steps.versioning.outputs.ssm_pkg_version }} bash tools/ssm/ssm_rollback_default_version.sh
      - name: clean up SSM test package
        if: steps.cache_packages.outputs.cache-hit == 'true'
        run: |
          aws ssm describe-document --name ${{ env.SSM_PACKAGE_NAME }} --version-name ${{ steps.versioning.outputs.ssm_pkg_version }} >/dev/null 2>&1 && \
            aws ssm delete-document --name ${{ env.SSM_PACKAGE_NAME }} --version-name ${{ steps.versioning.outputs.ssm_pkg_version }}

  validate-all-tests-pass:
    runs-on: ubuntu-22.04
    needs: [run-batch-job,e2etest-preparation,create-test-ref,get-testing-suites]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TESTING_FRAMEWORK_REPO }}
          path: testing-framework
          ref: testrpm

      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.COLLECTOR_ASSUMABLE_ROLE_ARN }}
          aws-region: us-west-2

      # combine all test-case-batch values
      - name: create test-case-batch file
        run: |
          jsonStr='${{ needs.get-testing-suites.outputs.test-case-batch-value }}'
          jsonStr="$(jq -r '.[] | join("\n")' <<< "${jsonStr}")"
          echo "$jsonStr" >> testing-framework/terraform/test-case-batch
          cat testing-framework/terraform/test-case-batch

      - name: output cache misses
        run: |
          export TF_VAR_aoc_version=${{ needs.e2etest-preparation.outputs.version }}
          cd testing-framework/terraform
          make checkCacheHits
