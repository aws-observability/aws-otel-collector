# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

name: 'nightly soaking test'
on:
  schedule:
    - cron: '0 10 * * SAT' # every Saturday at 10 am UTC: pst 2am
      
  # version bump from ci workflow will send dispatch event
  # or we can manually trigger this workflow by using dispatch for debuging  
  repository_dispatch:
    types: [bump-version]
        
env:
  TF_VAR_aws_access_key_id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
  TF_VAR_aws_secret_access_key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }} 

jobs:
  get-testing-version:
    runs-on: ubuntu-latest
    outputs: 
      testing_version: ${{ steps.get-testing-version.outputs.testing_version }}
      commit_id: ${{ steps.get-testing-version.outputs.commit_id }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
      
      - name: Download Candidate from the latest commit
        if: github.event_name != 'repository_dispatch'
        run: aws s3 cp "s3://aws-otel-collector-release-candidate/${{ github.sha }}.tar.gz" ./candidate.tar.gz
      
      - name: Download Candidate base on dispatch payload
        if: github.event_name == 'repository_dispatch'
        run: aws s3 cp "s3://aws-otel-collector-release-candidate/${{ github.event.client_payload.sha }}.tar.gz" ./candidate.tar.gz
      
      - name: uncompress the candidate package
        run: tar -zxf ./candidate.tar.gz
          
      - name: get testing version
        id: get-testing-version
        run: |
          testing_version=`cat build/packages/TESTING_VERSION`
          echo "::set-output name=testing_version::$testing_version"
          commit_id=`cat build/packages/GITHUB_SHA`
          echo "::set-output name=commit_id::$commit_id"
          
  get-soaking-test-cases:
    runs-on: ubuntu-latest
    outputs:
      soaking_matrix: ${{ steps.get-test-cases.outputs.soaking_matrix }}
    steps:
      - uses: actions/checkout@v2
        
      - name: Setup Python
        uses: actions/setup-python@v2.1.4
      
      - name: get all the soaking test cases
        id: get-test-cases
        run: |
          soaking_matrix=$(python e2etest/get-testcases.py soaking_matrix)
          echo "::set-output name=soaking_matrix::$soaking_matrix"
          
  get-negative-soaking-test-cases:
    runs-on: ubuntu-latest
    outputs:
      soaking_matrix: ${{ steps.get-test-cases.outputs.soaking_matrix }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Python
        uses: actions/setup-python@v2.1.4
        
      - name: get all the soaking test cases
        id: get-test-cases
        run: |
          soaking_matrix=$(python e2etest/get-testcases.py negative_soaking_matrix)
          echo "::set-output name=soaking_matrix::$soaking_matrix"        
          
  run-soaking-test:
    runs-on: ubuntu-latest
    needs: [get-soaking-test-cases, get-testing-version]
    strategy:
      matrix: ${{ fromJson(needs.get-soaking-test-cases.outputs.soaking_matrix) }}
      fail-fast: false
      max-parallel: 10
    steps:
      - uses: actions/checkout@v2
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
          
      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Check out testing framework
        uses: actions/checkout@v2
        with:
          repository: 'aws-observability/aws-otel-collector-test-framework'
          path: testing-framework
          
      - name: Run Soaking test
        run: |
          if [[ -f testing-framework/terraform/testcases/${{ matrix.testcase }}/parameters.tfvars ]] ; then opts="-var-file=../testcases/${{ matrix.testcase }}/parameters.tfvars" ; else opts="" ; fi
          cd testing-framework/terraform/soaking && terraform init && terraform apply -auto-approve -lock=false -var="commit_id=${{ needs.get-testing-version.outputs.commit_id }}" $opts -var="aoc_version=${{ needs.get-testing-version.outputs.testing_version }}" -var="testcase=../testcases/${{ matrix.testcase }}" -var="testing_ami=${{ matrix.testing_ami }}" -var="ssh_key_name=aoc-ssh-key-2020-07-22" -var="sshkey_s3_bucket=aoc-ssh-key" -var="sshkey_s3_private_key=aoc-ssh-key-2020-07-22.txt"
          
      - name: Cache the Terraform state
        uses: actions/cache@v2
        with:
          key: "terraform-context-${{ matrix.testcase }}-${{ matrix.testing_ami }}-${{ github.run_id }}"
          path: testing-framework/
        
      - name: upload terraform state to S3 so we can recycle it
        if: always()
        run: |
          package_name="terraform-state-${{ matrix.testcase }}-${{ matrix.testing_ami }}-${{ github.run_id }}.tar.gz"
          tar -czvf $package_name testing-framework
          today=`date +'%Y/%m/%d'`
          aws s3 cp $package_name s3://soaking-terraform-state/$today/$package_name
          
          
  soaking-pulling-1:
    runs-on: ubuntu-latest
    needs: [run-soaking-test, get-soaking-test-cases]
    strategy:
      matrix: ${{ fromJson(needs.get-soaking-test-cases.outputs.soaking_matrix) }}
      fail-fast: false
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
          
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: restore cached rpms
        uses: actions/cache@v2
        with:
          path: testing-framework/
          key: "terraform-context-${{ matrix.testcase }}-${{ matrix.testing_ami }}-${{ github.run_id }}"
      
      - name: Soaking Test pulling
        run: cd testing-framework/terraform/soaking && docker-compose -f validator_docker_compose.yml up --abort-on-container-exit
      
  
  soaking-pulling-2:
    runs-on: ubuntu-test
    needs: [soaking-pulling-1, get-soaking-test-cases]
    strategy:
      matrix: ${{ fromJson(needs.get-soaking-test-cases.outputs.soaking_matrix) }}
      fail-fast: false
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
          
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: restore cached terraform state
        uses: actions/cache@v2
        with:
          path: testing-framework/
          key: "terraform-context-${{ matrix.testcase }}-${{ matrix.testing_ami }}-${{ github.run_id }}"
      
      - name: Soaking Test pulling
        run: cd testing-framework/terraform/soaking && docker-compose -f validator_docker_compose.yml up --abort-on-container-exit
    
  soaking-pulling-3:
    runs-on: ubuntu-test
    needs: [soaking-pulling-2, get-soaking-test-cases]
    strategy:
      matrix: ${{ fromJson(needs.get-soaking-test-cases.outputs.soaking_matrix) }}
      fail-fast: false
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
          
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: restore cached terraform state
        uses: actions/cache@v2
        with:
          path: testing-framework/
          key: "terraform-context-${{ matrix.testcase }}-${{ matrix.testing_ami }}-${{ github.run_id }}"
      
      - name: Soaking Test pulling
        run: cd testing-framework/terraform/soaking && docker-compose -f validator_docker_compose.yml up --abort-on-container-exit

  run-negative-soaking-test:
    runs-on: ubuntu-latest
    needs: [get-negative-soaking-test-cases, get-testing-version]
    strategy:
      matrix: ${{ fromJson(needs.get-negative-soaking-test-cases.outputs.soaking_matrix) }}
      fail-fast: false
      max-parallel: 10
    steps:
      - uses: actions/checkout@v2
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
          
      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Check out testing framework
        uses: actions/checkout@v2
        with:
          repository: 'aws-observability/aws-otel-collector-test-framework'
          path: testing-framework
          
      - name: Run Soaking test
        run: |
          if [[ -f testing-framework/terraform/testcases/${{ matrix.testcase }}/parameters.tfvars ]] ; then opts="-var-file=../testcases/${{ matrix.testcase }}/parameters.tfvars" ; else opts="" ; fi
          cd testing-framework/terraform/soaking && terraform init && terraform apply -auto-approve -lock=false $opts -var="negative_soaking=true" -var="commit_id=${{ needs.get-testing-version.outputs.commit_id }}" -var="aoc_version=${{ needs.get-testing-version.outputs.testing_version }}" -var="testcase=../testcases/${{ matrix.testcase }}" -var="testing_ami=${{ matrix.testing_ami }}" -var="ssh_key_name=aoc-ssh-key-2020-07-22" -var="sshkey_s3_bucket=aoc-ssh-key" -var="sshkey_s3_private_key=aoc-ssh-key-2020-07-22.txt"
                
      - name: Cache the Terraform state
        uses: actions/cache@v2
        with:
          key: "terraform-context-negative-${{ matrix.testcase }}-${{ matrix.testing_ami }}-${{ github.run_id }}"
          path: testing-framework/
        
      - name: upload terraform state to S3 so we can recycle it
        if: always()
        run: |
          package_name="terraform-state-negative-${{ matrix.testcase }}-${{ matrix.testing_ami }}-${{ github.run_id }}.tar.gz"
          tar -czvf $package_name testing-framework
          today=`date +'%Y/%m/%d'`
          aws s3 cp $package_name s3://soaking-terraform-state/$today/$package_name
      
          
  negative-soaking-pulling-1:
    runs-on: ubuntu-latest
    needs: [run-negative-soaking-test, get-negative-soaking-test-cases]
    strategy:
      matrix: ${{ fromJson(needs.get-negative-soaking-test-cases.outputs.soaking_matrix) }}
      fail-fast: false
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
          
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: restore cached terraform state
        uses: actions/cache@v2
        with:
          path: testing-framework/
          key: "terraform-context-negative-${{ matrix.testcase }}-${{ matrix.testing_ami }}-${{ github.run_id }}"
      
      - name: Soaking Test pulling
        run: cd testing-framework/terraform/soaking && docker-compose -f validator_docker_compose.yml up --abort-on-container-exit
    
  
  negative-soaking-pulling-2:
    runs-on: ubuntu-latest
    needs: [negative-soaking-pulling-1, get-negative-soaking-test-cases]
    strategy:
      matrix: ${{ fromJson(needs.get-negative-soaking-test-cases.outputs.soaking_matrix) }}
      fail-fast: false
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
          
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: restore cached terraform state
        uses: actions/cache@v2
        with:
          path: testing-framework/
          key: "terraform-context-negative-${{ matrix.testcase }}-${{ matrix.testing_ami }}-${{ github.run_id }}"
      
      - name: Soaking Test pulling
        run: cd testing-framework/terraform/soaking && docker-compose -f validator_docker_compose.yml up --abort-on-container-exit
        
  negative-soaking-pulling-3:
    runs-on: ubuntu-latest
    needs: [negative-soaking-pulling-2, get-negative-soaking-test-cases]
    strategy:
      matrix: ${{ fromJson(needs.get-negative-soaking-test-cases.outputs.soaking_matrix) }}
      fail-fast: false
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
          
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: restore cached terraform state
        uses: actions/cache@v2
        with:
          path: testing-framework/
          key: "terraform-context-negative-${{ matrix.testcase }}-${{ matrix.testing_ami }}-${{ github.run_id }}"
      
      - name: Soaking Test pulling
        run: cd testing-framework/terraform/soaking && docker-compose -f validator_docker_compose.yml up --abort-on-container-exit
