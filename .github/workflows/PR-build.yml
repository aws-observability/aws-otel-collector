# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

name: PR Build

on:
  pull_request:
    branches:
      - main
      - dev

env:
  IMAGE_NAME: aws-otel-collector
  PACKAGING_ROOT: build/packages
  ECR_REPO: aws-adot-pr-build/aws-otel-collector
  IMAGE_LINK: "public.ecr.aws/aws-observability/aws-otel-collector"

  TF_VAR_aws_access_key_id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
  TF_VAR_aws_secret_access_key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
  TF_VAR_aoc_vpc_name: aoc-vpc-large
  TF_VAR_aoc_vpc_security_group: aoc-vpc-security-group-large

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    # Set up building environment, patch the dev repo code on dispatch events.  
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - uses: actions/checkout@v2

    # Unit Test and attach test coverage badge
    - name: Unit Test
      run: make test

    - name: Upload Coverage report to CodeCov
      uses: codecov/codecov-action@v1.0.12
      with:
        file: ./coverage.txt

    # Build and archive binaries into cache.
    - name: Build Binaries
      run: make build

    - name: Cache binaries
      uses: actions/cache@v2
      with:
        key: "cached_binaries_${{ github.run_id }}"
        path: build

    # upload the binaries to artifact as well because cache@v2 hasn't support windows
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: binary_artifacts
        path: build

  analyze:
    name: CodeQL Analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: "go"

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  packaging-msi:
    needs: build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download built artifacts
        uses: actions/download-artifact@v2
        with:
          name: binary_artifacts
          path: build

      - name: Display structure of downloaded files
        run: ls -R

      - name: Create msi file using candle and light
        run: .\tools\packaging\windows\create_msi.ps1

  packaging-rpm:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Build and archive rpms into cache.
      - uses: actions/checkout@v2

      - name: restore cached binaries
        uses: actions/cache@v2
        with:
          key: "cached_binaries_${{ github.run_id }}"
          path: build

      - name: Display structure of downloaded files
        run: ls -R

      - name: Build RPM
        run: |
          ARCH=x86_64 DEST=build/packages/linux/amd64 tools/packaging/linux/create_rpm.sh
          ARCH=aarch64 DEST=build/packages/linux/arm64 tools/packaging/linux/create_rpm.sh

  packaging-deb:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Build and archive debs into cache.
      - uses: actions/checkout@v2

      - name: restore cached binaries
        uses: actions/cache@v2
        with:
          key: "cached_binaries_${{ github.run_id }}"
          path: build

      - name: Build Debs
        run: |
          ARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 DEST=build/packages/debian/amd64 tools/packaging/debian/create_deb.sh
          ARCH=arm64 TARGET_SUPPORTED_ARCH=aarch64 DEST=build/packages/debian/arm64 tools/packaging/debian/create_deb.sh

  packaging-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Cache Docker Image
        id: cached_image
        uses: actions/cache@v2
        with:
          key: "cached_image_${{ github.run_id }}"
          path: "${{ env.PACKAGING_ROOT }}"

      - name: Build Docker Image
        if: steps.cached_image.outputs.cache-hit != 'true'
        run: docker build -t $IMAGE_NAME -f cmd/awscollector/Dockerfile .

      #Save the image as a tar file and let the Cache Docker Image step cache for later use.
      #Documentation: https://docs.docker.com/engine/reference/commandline/save/
      - name: Extract the Image file
        if: steps.cached_image.outputs.cache-hit != 'true'
        run: |
          mkdir -p $PACKAGING_ROOT
          docker save --output $PACKAGING_ROOT/$IMAGE_NAME.tar $IMAGE_NAME

  versioning-image:
    runs-on: ubuntu-latest
    needs: packaging-image
    steps:
      #To ensure each PR build is having different tag and for the re-run when the same workflow will have the same tag,
      #Using github.run_id would fit into our use case
      #Documentation: https://docs.github.com/en/actions/learn-github-actions/contexts
      - name: Versioning for testing
        run: |
          Version="`cat VERSION`-$GITHUB_RUN_ID"
          echo $Version > build/packages/VERSION
          cat build/packages/VERSION
          echo "::set-output name=version::$Version"

  test-case-preparation:
    runs-on: ubuntu-latest
    needs: versioning-image
    steps:
      #To avoid repetition in tagging and uploading the docker image to ECR, we use file VERSION to become an intermediate
      - name: Cache preparation
        id: cached-preparation
        uses: actions/cache@v2
        with:
          path: |
            VERSION
          key: test-preparation-${{ github.run_id }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: steps.cached-preparation.outputs.cache-hit != 'true'
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: Restore Docker Cached Image
        uses: actions/cache@v2
        if: steps.cached-preparation.outputs.cache-hit != 'true'
        with:
          key: "cached_image_${{ github.run_id }}"
          path: "${{ env.PACKAGING_ROOT }}"

      #Load the previous cache image when using docker build and upload it to ECR with the github_id tag version
      - name: Login ECR
        id: login-ecr
        if: steps.cached-preparation.outputs.cache-hit != 'true'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Upload To ECR
        if: steps.cached-preparation.outputs.cache-hit != 'true'
        run: |
          docker load < $PACKAGING_ROOT/$IMAGE_NAME.tar
          docker tag $IMAGE_NAME ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:${{ needs.versioning-image.outputs.version }}
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:${{ needs.versioning-image.outputs.version }}

  get-test-cases:
    runs-on: ubuntu-latest
    needs: test-case-preparation
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - id: file_changes
        uses: trilom/file-changes-action@v1.2.4
        with:
          fileOutput: ''
          
      - name: Get the updated files
        run: echo ${{ steps.file_changes.outputs.files_modified }}
      
      - name: Check if this is a version bump pr
        if: contains(steps.file_changes.outputs.files_modified, 'VERSION')
        run: echo "this is a version bump pr!"
      
      - name: Setup Python
        uses: actions/setup-python@v2.1.4

      - name: Get all the testing suites
        id: set-matrix
        run: | 
          matrix=$(python e2etest/get-testcases.py local_matrix)
          echo "::set-output name=matrix::$matrix"
          
      - name: List testing suites
        run: |
          echo ${{ steps.set-matrix.outputs.matrix }}
          
  run-test-case:
    runs-on: ubuntu-latest
    needs: [get-test-cases]
    strategy:
      matrix: ${{ fromJson(needs.get-test-cases.outputs.matrix) }}
    
    steps:
      - name: Check out testing framework
        uses: actions/checkout@v2
        with:
          repository: 'aws-observability/aws-otel-collector-test-framework'
          path: testing-framework
          
      - name: Check out Collector
        uses: actions/checkout@v2
        with:
          path: aws-otel-collector
          
      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1.2.1
        
      - name: Run test
        run: | 
          if [[ -f testing-framework/terraform/testcases/${{ matrix.testcase }}/parameters.tfvars ]] ; then opts="-var-file=../testcases/${{ matrix.testcase }}/parameters.tfvars" ; else opts="" ; fi
          cd testing-framework/terraform/mock && terraform init && terraform apply -auto-approve -var="testcase=../testcases/${{ matrix.testcase }}" $opts
