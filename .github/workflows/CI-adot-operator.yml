# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

name: C/I ADOT Operator
on:
  push:
    branches:
      - main
      - release/v*
      - dev
      - test/*
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/CI-adot-operator.yml'
      - '**.md'

  # from collector and contrib repo
  repository_dispatch:
    types: [dependency-build, workflow-run]

env:
  IMAGE_NAME: aws-otel-collector
  ECR_REPO: aws-otel-test/adot-collector-integration-test
  TF_VAR_aws_access_key_id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
  TF_VAR_aws_secret_access_key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}

concurrency:
  group: ci-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  build-aotutil:
    runs-on: ubuntu-latest
    steps:
      - name: Check out testing framework
        uses: actions/checkout@v2
        with:
          repository: 'aws-observability/aws-otel-test-framework'
          path: testing-framework
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Install Go tools
        run: cd /tmp && go get -u golang.org/x/tools/cmd/goimports
      - name: Build aotutil
        run: cd testing-framework/cmd/aotutil && make build

  build:
    needs:
      - build-aotutil
    runs-on: ubuntu-latest

    steps:
    # Set up building environment, patch the dev repo code on dispatch events.
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - uses: actions/checkout@v2

    - name: Checkout dev opentelemetry-collector-contrib
      if: github.event_name == 'repository_dispatch' && github.event.action == 'dependency-build'
      uses: actions/checkout@v2
      with:
        repository: ${{ github.repository_owner }}/opentelemetry-collector-contrib
        ref: main
        path: pkg/opentelemetry-collector-contrib

    - name: Checkout dev opentelemetry-collector
      if: github.event_name == 'repository_dispatch' && github.event.action == 'dependency-build'
      uses: actions/checkout@v2
      with:
        repository: ${{ github.repository_owner }}/opentelemetry-collector
        ref: main
        path: pkg/opentelemetry-collector

    - name: append replace statement to go.mod to build with dev repo
      if: github.event_name == 'repository_dispatch' && github.event.action == 'dependency-build'
      run: |
        echo "replace github.com/open-telemetry/opentelemetry-collector-contrib/exporter/awsxrayexporter => ./pkg/opentelemetry-collector-contrib/exporter/awsxrayexporter" >> go.mod
        echo "replace go.opentelemetry.io/collector => ./pkg/opentelemetry-collector" >> go.mod
        cat go.mod
        ls pkg

    #Cache go build and dependencies before making unit testing and build
    #Samples codes for different OS: https://github.com/actions/cache/blob/main/examples.md#go---modules
    #Since we are using Linux, the go packages are in /go/pkg/mod and build are in /.cache/go-build
    #Also speed up unit testing since go test uses the go build cache and also speed up the go build.
    - name: Cache binaries
      id: cached_binaries
      uses: actions/cache@v2
      with:
        key: "cached_binaries_${{ github.run_id }}"
        path: build

    # Unit Test and attach test coverage badge
    - name: Unit Test
      if: steps.cached_binaries.outputs.cache-hit != 'true'
      run: make test

    - name: Upload Coverage report to CodeCov
      if: steps.cached_binaries.outputs.cache-hit != 'true'
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.txt

    # Build and archive binaries into cache.
    - name: Build Binaries
      if: steps.cached_binaries.outputs.cache-hit != 'true'
      run: make build

    # upload the binaries to artifact as well because cache@v2 hasn't support windows
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: binary_artifacts
        path: build

  e2etest-preparation:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.version }}
    steps:
      # Build a version with github short sha for the following reasons:
      # - Distingush each build for Integration test
      # - Increase more visibility to the customer and also for the developer since we publish the image for integration test.
      # - Avoid having similar layers image and only have a final result image.
      - name: Versioning for testing
        id: versioning
        run: |
          version="$(cat VERSION)-$(git rev-parse --short HEAD)"
          echo "::set-output name=version::$version"

  e2etest-release:
    runs-on: ubuntu-latest
    needs: e2etest-preparation
    steps:
      - uses: actions/checkout@v2

      - name: Cache if success
        id: e2etest-release
        uses: actions/cache@v2
        with:
          path: |
            VERSION
          key: e2etest-release-${{ github.run_id }}

      - name: Restore cached binaries
        if: steps.e2etest-release.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          key: "cached_binaries_${{ github.run_id }}"
          path: build

      - name: Login to Public Integration Test ECR
        if: steps.e2etest-release.outputs.cache-hit != 'true'
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          password: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
        env:
          AWS_REGION: us-east-1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: Set up Docker Buildx
        if: steps.e2etest-release.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v1

      - name: Set up QEMU
        if: steps.e2etest-release.outputs.cache-hit != 'true'
        uses: docker/setup-qemu-action@v1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: public.ecr.aws/${{ env.ECR_REPO }}

      #Build the adot collector image for two primary reasons:
      #-Using the adot collector image to do the integration test
      #-Export it for delivery version image in CD
      #Documentation: https://github.com/docker/build-push-action
      - name: Build ADOT collector image
        uses: docker/build-push-action@v2
        if: steps.e2etest-release.outputs.cache-hit != 'true'
        with:
          file: cmd/awscollector/Dockerfile
          context: .
          push: true
          tags: |
            public.ecr.aws/${{ env.ECR_REPO }}:${{ needs.e2etest-preparation.outputs.version }}
          build-args: BUILDMODE=copy
          cache-from: type=registry
          cache-to: type=inline
          platforms : linux/amd64, linux/arm64
          labels: ${{ steps.meta.outputs.labels }}

  get-testing-suites:
    runs-on: ubuntu-latest
    outputs:
      eks-adot-operator-matrix: ${{ steps.set-matrix.outputs.eks-adot-operator-matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2.3.2

      - name: testing suite for ADOT operator
        id: set-matrix
        run: |
          eks_adot_operator_matrix=$(python e2etest/get-testcases.py eks_adot_operator_matrix)
          echo "::set-output name=eks-adot-operator-matrix::$eks_adot_operator_matrix"
      - name: List testing suites
        run: |
          echo ${{ steps.set-matrix.outputs.eks-adot-operator-matrix }}

  e2etest-eks-adot-operator:
    runs-on: ubuntu-latest
    needs: [get-testing-suites, e2etest-release, e2etest-preparation]
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix: ${{ fromJson(needs.get-testing-suites.outputs.eks-adot-operator-matrix) }}

    steps:
      - uses: actions/checkout@v2

      - name: Cache if success
        id: e2etest-eks-adot-operator
        uses: actions/cache@v2
        with:
          path: |
            VERSION
          key: e2etest-eks-adot-operator-${{ github.run_id }}-${{ matrix.testcase }}

      - name: Configure AWS Credentials
        if: steps.e2etest-eks-adot-operator.outputs.cache-hit != 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: Set up JDK 11
        if: steps.e2etest-eks-adot-operator.outputs.cache-hit != 'true'
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Set up terraform
        if: steps.e2etest-eks-adot-operator.outputs.cache-hit != 'true'
        uses: hashicorp/setup-terraform@v1

      - name: Check out testing framework
        if: steps.e2etest-eks-adot-operator.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: 'aws-observability/aws-otel-collector-test-framework'
          path: testing-framework

      - name: Run ADOT Operator testing suite on eks
        if: steps.e2etest-eks-adot-operator.outputs.cache-hit != 'true'
        run: |
          opts=""
          if [[ -f testing-framework/terraform/testcases/${{ matrix.testcase }}/parameters.tfvars ]] ; then opts="-var-file=../testcases/${{ matrix.testcase }}/parameters.tfvars" ; fi
          cd testing-framework/terraform/eks && terraform init && terraform apply -auto-approve $opts -var="aoc_version=${{ needs.e2etest-preparation.outputs.version }}" -var="testcase=../testcases/${{ matrix.testcase }}"

      - name: Destroy resources
        if: ${{ always() && steps.e2etest-eks-adot-operator.outputs.cache-hit != 'true' }}
        uses: nick-invision/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 8
          retry_wait_seconds: 20
          command: |
            opts=""
            if [[ -f testing-framework/terraform/testcases/${{ matrix.testcase }}/parameters.tfvars ]] ; then opts="-var-file=../testcases/${{ matrix.testcase }}/parameters.tfvars" ; fi
            cd testing-framework/terraform/eks && terraform destroy -auto-approve $opts

