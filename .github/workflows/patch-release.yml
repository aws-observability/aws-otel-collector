# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.


name: Patch Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'the version number to release'
        required: true

env:
  IMAGE_NAME: aws-otel-collector
  IMAGE_NAMESPACE: amazon
  ECR_REPO: aws-observability/aws-otel-collector

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build Image
        run: docker build -t $IMAGE_NAME -f tools/release/patch/${{ github.event.inputs.version }}/Dockerfile .
      - name: Extract the Image file
        run: docker save --output $IMAGE_NAME.tar $IMAGE_NAME
      - name: Upload built Image
        uses: actions/upload-artifact@v2
        with:
          name: image_artifact
          path: $IMAGE_NAME.tar

  release-image:
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Download built Image
        uses: actions/download-artifact@v2
        with:
          name: image_artifact
          path: $IMAGE_NAME.tar

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.RELEASE_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RELEASE_SECRET }}
          aws-region: us-west-2

      - name: Install AWS Cli 2.0
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Load Image
        run: |
          docker load < $IMAGE_NAME.tar

      - name: Upload to ECR
        run: |
          TAG=${{ github.event.inputs.version }}
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/aws-observability
          docker tag $IMAGE_NAME public.ecr.aws/$ECR_REPO:$TAG
          docker tag $IMAGE_NAME public.ecr.aws/$ECR_REPO:latest
          docker push public.ecr.aws/$ECR_REPO:$TAG
          docker push public.ecr.aws/$ECR_REPO:latest

      - name: Login Dockerhub
        uses: docker/login-action@v1
        with:
          username: "${{ secrets.DOCKERHUB_RELEASE_USERNAME }}"
          password: "${{ secrets.DOCKERHUB_RELEASE_TOKEN }}"

      - name: Push Image to dockerhub
        id: push-to-dockerhub
        run: |
          TAG=${{ github.event.inputs.version }}
          REPO_NAME="$IMAGE_NAMESPACE/$IMAGE_NAME"
          docker tag $IMAGE_NAME $REPO_NAME:$TAG
          docker tag $IMAGE_NAME $REPO_NAME:latest
          docker push $REPO_NAME:$TAG
          docker push $REPO_NAME:latest