# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

name: C/D

on:        
  workflow_dispatch:
    inputs:
      version:
        description: 'the version number to release'
        required: true
      sha:
        description: 'the github sha to release'
        required: true
    
env:
  IMAGE_NAME: aws-otel-collector
  IMAGE_NAMESPACE: amazon
  ECR_REPO: aws-observability/aws-otel-collector
  PACKAGE_CACHE_KEY: "cached_tested_packages_${{ github.run_id }}"
  IMAGE_LINK: "public.ecr.aws/aws-observability/aws-otel-collector"
  TF_VAR_aws_access_key_id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
  TF_VAR_aws_secret_access_key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}

jobs:
  release-checking: 
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout the sha
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.sha }}

      - name: Checking if the related commit has passed the Soaking test
        run: echo "Checking Soaking test"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: download packages as release candidate from s3
        run: |
          # download candidate package
          aws s3 cp "s3://aws-otel-collector-release-candidate/${{ github.event.inputs.sha }}.tar.gz" candidate.tar.gz
          tar zxvf candidate.tar.gz
          
          # check commit sha and version
          version_in_candidate=`cat build/packages/VERSION`
          sha_in_candidate=`cat build/packages/GITHUB_SHA`
          if [ $version_in_candidate != ${{ github.event.inputs.version }} ]; then
            echo "wrong version is detected: $version_in_candidate != ${{ github.event.inputs.version }}"
            exit 1
          fi
          if [ $sha_in_candidate != ${{ github.event.inputs.sha }} ]; then
            echo "wrong sha is detected: $sha_in_candidate != ${{ github.event.inputs.sha }}"
            exit 1
          fi       

      - name: Cache packages
        uses: actions/cache@v2
        with:
          key: "${{ env.PACKAGE_CACHE_KEY }}"
          path: build/packages

  get-testing-suites:
    runs-on: ubuntu-latest
    outputs:
      eks-matrix: ${{ steps.set-matrix.outputs.eks-matrix }}
      ecs-matrix: ${{ steps.set-matrix.outputs.ecs-matrix }}
      ec2-matrix-1: ${{ steps.set-matrix.outputs.ec2-matrix-1 }}
      ec2-matrix-2: ${{ steps.set-matrix.outputs.ec2-matrix-2 }}
      ec2-matrix-3: ${{ steps.set-matrix.outputs.ec2-matrix-3 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.sha }}
      
      - name: Setup Python
        uses: actions/setup-python@v2.1.4

      - name: Get all the testing suites
        id: set-matrix
        run: | 
          ec2_matrix_1=$(python e2etest/get-testcases.py ec2_matrix_1)
          ec2_matrix_2=$(python e2etest/get-testcases.py ec2_matrix_2)
          ec2_matrix_3=$(python e2etest/get-testcases.py ec2_matrix_3)
          ecs_matrix=$(python e2etest/get-testcases.py ecs_matrix)
          eks_matrix=$(python e2etest/get-testcases.py eks_matrix)
          echo "::set-output name=eks-matrix::$eks_matrix"
          echo "::set-output name=ecs-matrix::$ecs_matrix"
          echo "::set-output name=ec2-matrix-1::$ec2_matrix_1"
          echo "::set-output name=ec2-matrix-2::$ec2_matrix_2"
          echo "::set-output name=ec2-matrix-3::$ec2_matrix_3"
      - name: List testing suites
        run: |
          echo ${{ steps.set-matrix.outputs.eks-matrix }}    
          echo ${{ steps.set-matrix.outputs.ecs-matrix }}
          echo ${{ steps.set-matrix.outputs.ec2-matrix-1 }}
          echo ${{ steps.set-matrix.outputs.ec2-matrix-2 }}
          echo ${{ steps.set-matrix.outputs.ec2-matrix-3 }}
          
  release-to-s3:
    runs-on: ubuntu-latest
    needs: [release-checking]
    steps:
      - uses: actions/checkout@v2

      - name: Restore cached packages
        uses: actions/cache@v2
        with:
          key: "${{ env.PACKAGE_CACHE_KEY }}"
          path: build/packages

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.RELEASE_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RELEASE_SECRET }}
          aws-region: us-west-2

      - name: Release to S3
        run: s3_bucket_name=aws-otel-collector upload_to_latest=1 bash tools/release/s3-release.sh

  s3-release-validation-1:
    runs-on: ubuntu-latest
    needs: [get-testing-suites, release-to-s3]
    strategy:
      max-parallel: 5
      matrix: ${{ fromJson(needs.get-testing-suites.outputs.ec2-matrix-1) }}

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1

      - name: Check out testing framework
        uses: actions/checkout@v2
        with:
          repository: 'aws-observability/aws-otel-collector-test-framework'
          path: testing-framework

      - name: Run testing suite on ec2
        run: |
          if [[ -f testing-framework/terraform/testcases/${{ matrix.testcase }}/parameters.tfvars ]] ; then opts="-var-file=../testcases/${{ matrix.testcase }}/parameters.tfvars" ; else opts="" ; fi
          cd testing-framework/terraform/ec2 && terraform init && terraform apply -auto-approve -lock=false $opts -var="testing_ami=${{ matrix.testing_ami }}" -var="aoc_version=${{ github.event.inputs.version }}" -var="package_s3_bucket=aws-otel-collector" -var="testcase=../testcases/${{ matrix.testcase }}"
          
      - name: Destroy resources
        if: ${{ always() }}
        run: |
          cd testing-framework/terraform/ec2 && terraform destroy -auto-approve
          
  s3-release-validation-2:
    runs-on: ubuntu-latest
    needs: [get-testing-suites, release-to-s3]
    strategy:
      max-parallel: 5
      matrix: ${{ fromJson(needs.get-testing-suites.outputs.ec2-matrix-2) }}

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1

      - name: Check out testing framework
        uses: actions/checkout@v2
        with:
          repository: 'aws-observability/aws-otel-collector-test-framework'
          path: testing-framework

      - name: Run testing suite on ec2
        run: |
          if [[ -f testing-framework/terraform/testcases/${{ matrix.testcase }}/parameters.tfvars ]] ; then opts="-var-file=../testcases/${{ matrix.testcase }}/parameters.tfvars" ; else opts="" ; fi
          cd testing-framework/terraform/ec2 && terraform init && terraform apply -auto-approve -lock=false $opts -var="testing_ami=${{ matrix.testing_ami }}" -var="aoc_version=${{ github.event.inputs.version }}" -var="package_s3_bucket=aws-otel-collector" -var="testcase=../testcases/${{ matrix.testcase }}"
          
      - name: Destroy resources
        if: ${{ always() }}
        run: |
          cd testing-framework/terraform/ec2 && terraform destroy -auto-approve
          
  s3-release-validation-3:
    runs-on: ubuntu-latest
    needs: [get-testing-suites, release-to-s3]
    strategy:
      max-parallel: 5
      matrix: ${{ fromJson(needs.get-testing-suites.outputs.ec2-matrix-3) }}

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1

      - name: Check out testing framework
        uses: actions/checkout@v2
        with:
          repository: 'aws-observability/aws-otel-collector-test-framework'
          path: testing-framework

      - name: Run testing suite on ec2
        run: |
          if [[ -f testing-framework/terraform/testcases/${{ matrix.testcase }}/parameters.tfvars ]] ; then opts="-var-file=../testcases/${{ matrix.testcase }}/parameters.tfvars" ; else opts="" ; fi
          cd testing-framework/terraform/ec2 && terraform init && terraform apply -auto-approve -lock=false $opts -var="testing_ami=${{ matrix.testing_ami }}" -var="aoc_version=${{ github.event.inputs.version }}" -var="package_s3_bucket=aws-otel-collector" -var="testcase=../testcases/${{ matrix.testcase }}"
          
      - name: Destroy resources
        if: ${{ always() }}
        run: |
          cd testing-framework/terraform/ec2 && terraform destroy -auto-approve
          
  release-image:
    runs-on: ubuntu-latest
    needs: [release-checking]
    steps:
      - name: Restore cached packages
        uses: actions/cache@v2
        with:
          key: "${{ env.PACKAGE_CACHE_KEY }}"
          path: build/packages
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.RELEASE_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RELEASE_SECRET }}
          aws-region: us-west-2    
          
      - name: Install AWS Cli 2.0
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          
      - name: Load Image
        run: |
          docker load < build/packages/$IMAGE_NAME.tar
        
      - name: upload to ECR
        run: |
          TAG=`cat build/packages/VERSION`
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/aws-observability
          docker tag $IMAGE_NAME public.ecr.aws/$ECR_REPO:$TAG
          docker tag $IMAGE_NAME public.ecr.aws/$ECR_REPO:latest 
          docker push public.ecr.aws/$ECR_REPO:$TAG
          docker push public.ecr.aws/$ECR_REPO:latest
          
      - name: Login Dockerhub
        uses: docker/login-action@v1
        with:
          username: "josephwy"
          password: "${{ secrets.DOCKERHUB_RELEASE_TOKEN }}"

      - name: Push Image to dockerhub
        id: push-to-dockerhub
        run: |
          TAG=`cat build/packages/VERSION`
          REPO_NAME="$IMAGE_NAMESPACE/$IMAGE_NAME"
          docker tag $IMAGE_NAME $REPO_NAME:$TAG
          docker tag $IMAGE_NAME $REPO_NAME:latest
          docker push $REPO_NAME:$TAG
          docker push $REPO_NAME:latest
          
        
  release-validation-ecs:
    runs-on: ubuntu-latest
    needs: [get-testing-suites, release-image]
    strategy:
      max-parallel: 5
      matrix: ${{ fromJson(needs.get-testing-suites.outputs.ecs-matrix) }}
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
          
      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Check out testing framework
        uses: actions/checkout@v2
        with:
          repository: 'aws-observability/aws-otel-collector-test-framework'
          path: testing-framework
          
      - name: Run testing suite on ecs
        run: |
          if [[ -f testing-framework/terraform/testcases/${{ matrix.testcase }}/parameters.tfvars ]] ; then opts="-var-file=../testcases/${{ matrix.testcase }}/parameters.tfvars" ; else opts="" ; fi
          cd testing-framework/terraform/ecs && terraform init && terraform apply -auto-approve -lock=false $opts -var="ecs_launch_type=${{ matrix.launch_type }}" -var="aoc_version=${{ github.event.inputs.version }}" -var="aoc_image_repo=$IMAGE_LINK" -var="testcase=../testcases/${{ matrix.testcase }}"
                    
      - name: Destroy resources
        if: ${{ always() }}
        run: |
          cd testing-framework/terraform/ecs && terraform destroy -auto-approve           
                  
  release-validation-eks:
    runs-on: ubuntu-latest
    needs: [get-testing-suites, release-image]
    strategy:
      max-parallel: 5
      matrix: ${{ fromJson(needs.get-testing-suites.outputs.eks-matrix) }}
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
          
      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Check out testing framework
        uses: actions/checkout@v2
        with:
          repository: 'aws-observability/aws-otel-collector-test-framework'
          path: testing-framework
      
      - name: Run testing suite on eks
        run: |
          if [[ -f testing-framework/terraform/testcases/${{ matrix.testcase }}/parameters.tfvars ]] ; then opts="-var-file=../testcases/${{ matrix.testcase }}/parameters.tfvars" ; else opts="" ; fi
          cd testing-framework/terraform/eks && terraform init && terraform apply -auto-approve -lock=false $opts -var="aoc_version=${{ github.event.inputs.version }}" -var="aoc_image_repo=$IMAGE_LINK" -var="testcase=../testcases/${{ matrix.testcase }}"
          
      - name: Destroy resources
        if: ${{ always() }}
        run: |
          cd testing-framework/terraform/eks && terraform destroy -auto-approve       


  release-to-github:
    runs-on: ubuntu-latest
    needs: [release-image, release-to-s3]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.sha }}  
             
      - name: Generate release-note
        run: sh tools/release/generate-release-note.sh "`cat VERSION`"
        
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.event.inputs.version }}
          commitish: ${{ github.event.inputs.sha }}
          release_name: Release ${{ github.event.inputs.version }}
          body_path: release-note
          draft: true
          prerelease: true
