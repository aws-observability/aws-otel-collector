# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

name: CD

# listen on tag with name like v1.0.0
on:
  push:
    tags:
      - v*

env:
  IMAGE_NAME: aws-otel-collector
  IMAGE_NAMESPACE: amazon
  ECR_REPO: aws/aws-otel-collector
  PACKAGE_CACHE_KEY: "cached_tested_packages_${{ github.run_id }}"
  IMAGE_LINK: "020628701572.dkr.ecr.us-west-2.amazonaws.com/aws/aws-otel-collector"
  TF_VAR_aws_access_key_id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
  TF_VAR_aws_secret_access_key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}

jobs:
  release-checking:
    outputs:
      version: ${{ steps.get_version.outputs.version }}  
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout aws-opentelemetry-collector
        uses: actions/checkout@v2

      - name: Checking if the related commit has passed the Soaking test
        run: echo "Checking Soaking test"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: Get the version
        id: get_version
        run: echo ::set-output name=version::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: download packages as release candidate from s3
        uses: aws-observability/aws-otel-collector-test-framework@deprecating
        with:
          running_type: candidate
          opts: "-t=DownloadCandidate -s=.aoc-stack-test.yml -p=${{ steps.get_version.outputs.version }} -g=${{ github.sha }}"

      - name: cp stack into packages
        run: |
          cp .aoc-stack-release.yml build/packages/      

      - run: ls -R      

      - name: Cache packages
        uses: actions/cache@v2
        with:
          key: "${{ env.PACKAGE_CACHE_KEY }}"
          path: build/packages

  release-to-s3:
    runs-on: ubuntu-latest
    needs: release-checking
    outputs:
      s3_links: "${{ steps.release-to-s3.outputs.task_response }}"
    steps:
      - name: Restore cached packages
        uses: actions/cache@v2
        with:
          key: "${{ env.PACKAGE_CACHE_KEY }}"
          path: build/packages

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.RELEASE_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RELEASE_SECRET }}
          aws-region: us-west-2

      - name: Release to S3
        id: release-to-s3
        uses: aws-observability/aws-otel-collector-test-framework@deprecating
        with:
          running_type: release
          opts: "-t=S3Release -s=build/packages/.aoc-stack-release.yml" 

  s3-release-validation:
    strategy:
      matrix:
        ami: [AMAZON_LINUX, AMAZON_LINUX2, A1_AMAZON_LINUX, SUSE_15, SUSE_12, A1_SUSE_15, REDHAT_8, REDHAT_7, REDHAT_6, A1_REDHAT_8, A1_REDHAT_7, CENTOS_7, CENTOS_6, DEBIAN_10, DEBIAN_9, UBUNTU_18_04, UBUNTU_16_04, UBUNTU_14_04, A1_UBUNTU_18_04, A1_UBUNTU_16_04]

    runs-on: ubuntu-latest
    needs: [release-to-s3]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: restore cached rpms
        uses: actions/cache@v2
        with:
          path: build/packages
          key: "${{ env.PACKAGE_CACHE_KEY }}"

      - name: perform integration test on EC2
        uses: aws-observability/aws-otel-collector-test-framework@deprecating
        with:
          running_type: integ-test
          opts: "-t=EC2_TEST -s=build/packages/.aoc-stack-release.yml -a=${{ matrix.ami }}"

  release-image:
    runs-on: ubuntu-latest
    needs: [s3-release-validation]
    steps:
      - name: Restore cached packages
        uses: actions/cache@v2
        with:
          key: "${{ env.PACKAGE_CACHE_KEY }}"
          path: build/packages
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.RELEASE_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RELEASE_SECRET }}
          aws-region: us-west-2    
          
      - name: Load Image
        run: |
          docker load < build/packages/$IMAGE_NAME.tar
          
      - name: Login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: upload to ECR
        run: |
          TAG=`cat build/packages/VERSION`
          docker tag $IMAGE_NAME ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$TAG
          docker tag $IMAGE_NAME ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:latest 
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:latest
          
      - name: Login Dockerhub
        uses: docker/login-action@v1
        with:
          username: "josephwy"
          password: "${{ secrets.DOCKERHUB_RELEASE_TOKEN }}"

      - name: Push Image to dockerhub
        id: push-to-dockerhub
        run: |
          TAG=`cat build/packages/VERSION`
          REPO_NAME="$IMAGE_NAMESPACE/$IMAGE_NAME"
          docker tag $IMAGE_NAME $REPO_NAME:$TAG
          docker tag $IMAGE_NAME $REPO_NAME:latest
          docker push $REPO_NAME:$TAG
          docker push $REPO_NAME:latest
          
          
  get-testing-suites:
    runs-on: ubuntu-latest
    outputs:
      eks-matrix: ${{ steps.set-matrix.outputs.eks-matrix }}
      ecs-matrix: ${{ steps.set-matrix.outputs.ecs-matrix }}
      ec2-matrix: ${{ steps.set-matrix.outputs.ec2-matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Setup Python
        uses: actions/setup-python@v2.1.4

      - name: Get all the testing suites
        id: set-matrix
        run: | 
          ec2_matrix=$(python e2etest/get-testcases.py ec2_matrix)
          ecs_matrix=$(python e2etest/get-testcases.py ecs_matrix)
          eks_matrix=$(python e2etest/get-testcases.py eks_matrix)
          echo "::set-output name=eks-matrix::$eks_matrix"
          echo "::set-output name=ecs-matrix::$ecs_matrix"
          echo "::set-output name=ec2-matrix::$ec2_matrix"
      - name: List testing suites
        run: |
          echo ${{ steps.set-matrix.outputs.eks-matrix }}    
          echo ${{ steps.set-matrix.outputs.ecs-matrix }}
          echo ${{ steps.set-matrix.outputs.ec2-matrix }}        
          
  release-validation-ecs:
    runs-on: ubuntu-latest
    needs: [get-testing-suites, release-image, release-checking]
    strategy:
      matrix: ${{ fromJson(needs.get-testing-suites.outputs.ecs-matrix) }}
    
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
          
      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Check out testing framework
        uses: actions/checkout@v2
        with:
          repository: 'aws-observability/aws-otel-collector-test-framework'
          path: testing-framework
          ref: v0.2.1
          
      - name: Run testing suite on ecs
        run: |
          pwd=$PWD
          cd testing-framework/terraform/ecs && terraform init && terraform apply -auto-approve -var="ecs_launch_type=${{ matrix.launch_type }}" -var="aoc_version=${{ needs.release-checking.outputs.version }}" -var="aoc_image_repo=$IMAGE_LINK" -var="testcase=../testcases/${{ matrix.testcase }}" -var-file="../testcases/${{ matrix.testcase }}/parameters.tfvars"
                    
      - name: Destroy resources
        if: ${{ always() }}
        run: |
          cd testing-framework/terraform/ecs && terraform destroy -auto-approve           
                  
  release-validation-eks:
    runs-on: ubuntu-latest
    needs: [get-testing-suites, release-image, release-checking]
    strategy:
      matrix: ${{ fromJson(needs.get-testing-suites.outputs.eks-matrix) }}
    
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
          
      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Check out testing framework
        uses: actions/checkout@v2
        with:
          repository: 'aws-observability/aws-otel-collector-test-framework'
          path: testing-framework
          ref: v0.2.1
      
      - name: Run testing suite on eks
        run: |
          cd testing-framework/terraform/eks && terraform init && terraform apply -auto-approve -var="aoc_version=${{ needs.release-checking.outputs.version }}" -var="aoc_image_repo=$IMAGE_LINK" -var="testcase=../testcases/${{ matrix.testcase }}" -var-file="../testcases/${{ matrix.testcase }}/parameters.tfvars"
          
      - name: Destroy resources
        if: ${{ always() }}
        run: |
          cd testing-framework/terraform/eks && terraform destroy -auto-approve       


  release-to-github:
    runs-on: ubuntu-latest
    needs: [s3-release-validation, release-validation-ecs, release-validation-eks]
    steps:
      - uses: actions/checkout@v2
     
      - name: Generate release-note
        run: sh tools/release/generate-release-note.sh "`cat VERSION`"
        
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: release-note
          draft: true
          prerelease: true
