# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

name: CD

# listen on tag with name like v1.0.0
on:
  push:
    tags:
      - v*

env:
  IMAGE_NAME: aws-observability-collector
  PACKAGE_CACHE_KEY: "cached_tested_packages_${{ github.run_id }}"

jobs:
  release-checking:
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout aws-opentelemetry-collector
        uses: actions/checkout@v2

      - name: Checking if the related commit has passed the Soaking test
        run: echo "Checking Soaking test"

      - name: Get the version
        id: get_version
        run: echo ::set-output name=version::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: download packages as release candidate from s3
        uses: ./.github/actions/integ-test 
        with:
          running_type: candidate
          opts: "-t=DownloadCandidate -s=.aoc-stack-test.yml -p=${{ steps.get_version.outputs.version }} -g=${{ github.sha }}"

      - name: cp stack into packages
        run: |
          cp .aoc-stack-release.yml build/packages/      

      - run: ls -R      

      - name: Cache packages
        uses: actions/cache@v2
        with:
          key: "${{ env.PACKAGE_CACHE_KEY }}"
          path: build/packages

  release-to-s3:
    runs-on: ubuntu-latest
    needs: release-checking
    outputs:
      s3_links: "${{ steps.release-to-s3.outputs.task_response }}"
    steps:
      - uses: actions/checkout@v2
      - name: Restore cached packages
        uses: actions/cache@v2
        with:
          key: "${{ env.PACKAGE_CACHE_KEY }}"
          path: build/packages

      - name: Release to S3
        id: release-to-s3
        uses: ./.github/actions/integ-test 
        with:
          running_type: release
          opts: "-t=S3Release -s=build/packages/.aoc-stack-release.yml" 

  s3-release-validation:
    strategy:
      matrix:
        ami: [AMAZON_LINUX, AMAZON_LINUX2, A1_AMAZON_LINUX, SUSE_15, SUSE_12, A1_SUSE_15, REDHAT_8, REDHAT_7, REDHAT_6, A1_REDHAT_8, A1_REDHAT_7, CENTOS_7, CENTOS_6, DEBIAN_10, DEBIAN_9, UBUNTU_18_04, UBUNTU_16_04, UBUNTU_14_04, A1_UBUNTU_18_04, A1_UBUNTU_16_04]

    runs-on: ubuntu-latest
    needs: [release-to-s3]
    steps:
      - uses: actions/checkout@v2

      - name: restore cached rpms
        uses: actions/cache@v2
        with:
          path: build/packages
          key: "${{ env.PACKAGE_CACHE_KEY }}"

      - name: perform integration test on EC2
        uses: ./.github/actions/integ-test 
        with:
          running_type: integ-test
          opts: "-t=EC2_TEST -s=build/packages/.aoc-stack-release.yml -a=${{ matrix.ami }}"

  release-to-github-container-registry:
    runs-on: ubuntu-latest
    needs: [s3-release-validation]
    steps:
      - name: Restore cached packages
        uses: actions/cache@v2
        with:
          key: "${{ env.PACKAGE_CACHE_KEY }}"
          path: build/packages

      - name: Login Dockerhub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: "${{ github.repository_owner }}"
          password: "${{ secrets.CONTAINER_REGISTRY_TOKEN }}"

      - name: Push Image to dockerhub
        id: push-to-dockerhub
        run: |
          TAG=`cat build/packages/VERSION`
          REPO_NAME="ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME"
          docker load < build/packages/$IMAGE_NAME.tar
          docker tag $IMAGE_NAME $REPO_NAME:$TAG
          docker tag $IMAGE_NAME $REPO_NAME:latest
          docker push $REPO_NAME:$TAG
          docker push $REPO_NAME:latest

          
  image-release-validation-ecs:
    runs-on: ubuntu-latest
    needs: [release-to-github-container-registry]
    steps:
      - uses: actions/checkout@v2

      - name: restore cached rpms
        uses: actions/cache@v2
        with:
          path: build/packages
          key: "${{ env.PACKAGE_CACHE_KEY }}"

      - name: perform integration test on EC2 based ECS
        uses: ./.github/actions/integ-test 
        with:
          running_type: integ-test
          opts: "-t=ECS_TEST -s=build/packages/.aoc-stack-release.yml -a=ECS_OPTIMIZED -e ecsLaunchType=EC2 -e ecsTaskDef=ECS_EC2_TEMPLATE"

  image-release-validation-fargate:
    runs-on: ubuntu-latest
    needs: [release-to-github-container-registry]
    steps:
      - uses: actions/checkout@v2

      - name: restore cached rpms
        uses: actions/cache@v2
        with:
          path: build/packages
          key: "${{ env.PACKAGE_CACHE_KEY }}"

      - name: perform integration test on fargate
        uses: ./.github/actions/integ-test 
        with:
          running_type: integ-test
          opts: "-t=ECS_TEST -s=build/packages/.aoc-stack-release.yml -e ecsLaunchType=FARGATE -e ecsTaskDef=ECS_FARGATE_TEMPLATE"

  image-release-validation-eks:
    runs-on: ubuntu-latest
    needs: [release-to-github-container-registry]
    steps:
      - uses: actions/checkout@v2

      - name: restore cached rpms
        uses: actions/cache@v2
        with:
          path: build/packages
          key: "${{ env.PACKAGE_CACHE_KEY }}"

      - name: perform integration test on EKS    
        uses: ./.github/actions/integ-test 
        with:
          running_type: integ-test
          opts: "-t=EKS_TEST -s=build/packages/.aoc-stack-release.yml -k eksClusterName=aoc-test-eks-ec2"

  release-to-github:
    runs-on: ubuntu-latest
    needs: [s3-release-validation, image-release-validation-ecs, image-release-validation-fargate]
    steps:
      - uses: actions/checkout@v2
     
      - name: Generate release-note
        run: sh tools/release/generate-release-note.sh "`cat VERSION`"
        
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: release-note
          draft: true
          prerelease: true
