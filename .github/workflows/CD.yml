# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

name: C/D

on:        
  workflow_dispatch:
    inputs:
      version:
        description: 'the version number to release'
        required: true
      sha:
        description: 'the github sha to release'
        required: true
    
env:
  IMAGE_NAME: aws-otel-collector
  IMAGE_NAMESPACE: amazon
  PACKAGING_ROOT: build/packages
  ECR_REPO_INTEGRATION_TEST: aws-otel-test/adot-collector-integration-test
  ECR_REPO: aws-observability/aws-otel-collector
  PACKAGE_CACHE_KEY: "cached_tested_packages_${{ github.run_id }}"
  IMAGE_LINK: "public.ecr.aws/aws-observability/aws-otel-collector"
  TF_VAR_aws_access_key_id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
  TF_VAR_aws_secret_access_key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
  TF_VAR_aoc_vpc_name: aoc-vpc-large
  TF_VAR_aoc_vpc_security_group: aoc-vpc-security-group-large
  TESTING_FRAMEWORK_REPO: 'aws-observability/aws-otel-collector-test-framework'
  SSM_RELEASE_S3_BUCKET: "aws-otel-collector-ssm"
  SSM_RELEASE_PACKAGE_NAME: "AWSDistroOTel-Collector"
  RELEASE_S3_BUCKET: "aws-otel-collector"

jobs:
  release-checking: 
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.checking_sha_version.outputs.version }}
      testing_version: ${{ steps.checking_sha_version.outputs.testing_version }}
    steps: 
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: Download candidate
        run: aws s3 cp "s3://aws-otel-collector-release-candidate/${{ github.event.inputs.sha }}.tar.gz" candidate.tar.gz

      - name: Uncompress the candidate package
        run: tar zxvf candidate.tar.gz

      - name: Check commit SHA and version
        id: checking_sha_version
        run: |
          version_in_release=`cat $PACKAGING_ROOT/VERSION`
          version_in_release_candidate=`cat $PACKAGING_ROOT/TESTING_VERSION`
          sha_in_candidate=`cat $PACKAGING_ROOT/GITHUB_SHA`

          if [ $version_in_release != ${{ github.event.inputs.version }} ]; then
            echo "::error::Wrong version is detected: $version_in_release != ${{ github.event.inputs.version }}"
            exit 1
          fi
          if [ $sha_in_candidate != ${{ github.event.inputs.sha }} ]; then
            echo "::error::Wrong SHA is detected: $sha_in_candidate != ${{ github.event.inputs.sha }}"
            exit 1
          fi

          echo "::set-output name=version::$version_in_release"
          echo "::set-output name=testing_version::$version_in_release_candidate"

      - name: Cache packages
        uses: actions/cache@v2
        with:
          key: "${{ env.PACKAGE_CACHE_KEY }}"
          path: "${{ env.PACKAGING_ROOT }}"

  get-testing-suites:
    runs-on: ubuntu-latest
    outputs:
      eks-matrix: ${{ steps.set-matrix.outputs.eks-matrix }}
      ecs-matrix: ${{ steps.set-matrix.outputs.ecs-matrix }}
      ec2-matrix-1: ${{ steps.set-matrix.outputs.ec2-matrix-1 }}
      ec2-matrix-2: ${{ steps.set-matrix.outputs.ec2-matrix-2 }}
      ec2-matrix-3: ${{ steps.set-matrix.outputs.ec2-matrix-3 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.sha }}
      
      - name: Setup Python
        uses: actions/setup-python@v2.3.1

      - name: Get all the testing suites
        id: set-matrix
        run: | 
          ec2_matrix_1=$(python e2etest/get-testcases.py ec2_matrix_1)
          ec2_matrix_2=$(python e2etest/get-testcases.py ec2_matrix_2)
          ec2_matrix_3=$(python e2etest/get-testcases.py ec2_matrix_3)
          ecs_matrix=$(python e2etest/get-testcases.py ecs_matrix)
          eks_matrix=$(python e2etest/get-testcases.py eks_matrix)
          echo "::set-output name=eks-matrix::$eks_matrix"
          echo "::set-output name=ecs-matrix::$ecs_matrix"
          echo "::set-output name=ec2-matrix-1::$ec2_matrix_1"
          echo "::set-output name=ec2-matrix-2::$ec2_matrix_2"
          echo "::set-output name=ec2-matrix-3::$ec2_matrix_3"
      - name: List testing suites
        run: |
          echo ${{ steps.set-matrix.outputs.eks-matrix }}    
          echo ${{ steps.set-matrix.outputs.ecs-matrix }}
          echo ${{ steps.set-matrix.outputs.ec2-matrix-1 }}
          echo ${{ steps.set-matrix.outputs.ec2-matrix-2 }}
          echo ${{ steps.set-matrix.outputs.ec2-matrix-3 }}
          
  release-to-s3:
    runs-on: ubuntu-latest
    needs: [release-checking]
    steps:
      - uses: actions/checkout@v2

      - name: Restore cached packages
        uses: actions/cache@v2
        with:
          key: "${{ env.PACKAGE_CACHE_KEY }}"
          path: "${{ env.PACKAGING_ROOT }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.RELEASE_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RELEASE_SECRET }}
          aws-region: us-west-2

      - name: Release to S3
        run: s3_bucket_name=${{ env.RELEASE_S3_BUCKET }} upload_to_latest=1 bash tools/release/image-binary-release/s3-release.sh

      #Create ssm package and binaries/artifacts for validation test which is similar to SSM workflow release
      - name: Create SSM packages for validation test and set permission to public
        run: |
            ( aws ssm describe-document --name ${{ env.SSM_RELEASE_PACKAGE_NAME }} --version-name ${{ needs.release-checking.outputs.version }} >/dev/null 2>&1 ) || {
                  pip3 install boto3
                  python3 tools/ssm/ssm_manifest.py ${{ needs.release-checking.outputs.version }}
                  aws s3 cp $PACKAGING_ROOT/ssm s3://${{ env.SSM_RELEASE_S3_BUCKET }}/ssmfile/${{ needs.release-checking.outputs.version }} --recursive
                  python3 tools/ssm/ssm_create.py ${{ env.SSM_RELEASE_PACKAGE_NAME }} ${{ needs.release-checking.outputs.version }} ${{ env.SSM_RELEASE_S3_BUCKET }}/ssmfile/${{ needs.release-checking.outputs.version }} us-west-2
                  aws --region us-west-2 ssm modify-document-permission \
                      --name ${{ env.SSM_RELEASE_PACKAGE_NAME }} \
                      --permission-type "Share" \
                      --account-ids-to-add "All"
            }

  s3-release-validation-1:
    runs-on: ubuntu-latest
    needs: [get-testing-suites, release-to-s3, release-checking]
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix: ${{ fromJson(needs.get-testing-suites.outputs.ec2-matrix-1) }}

    steps:
      - uses: actions/checkout@v2

      - name: Cache if success
        id:  s3-release-validation-1
        uses: actions/cache@v2
        with:
          path: |
            VERSION
          key:  s3-release-validation-1-${{ github.run_id }}-${{ matrix.testcase }}-${{ matrix.testing_ami }}

      - name: Configure AWS Credentials
        if: steps.s3-release-validation-1.outputs.cache-hit != 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: Set up JDK 11
        if: steps.s3-release-validation-1.outputs.cache-hit != 'true'
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Set up terraform
        if: steps.s3-release-validation-1.outputs.cache-hit != 'true'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.10

      - name: Check out testing framework
        if: steps.s3-release-validation-1.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: "${{ env.TESTING_FRAMEWORK_REPO }}"
          path: testing-framework

      - name: Run testing suite on ec2
        if: steps.s3-release-validation-1.outputs.cache-hit != 'true'
        run: |
          if [[ -f testing-framework/terraform/testcases/${{ matrix.testcase }}/parameters.tfvars ]] ; then opts="-var-file=../testcases/${{ matrix.testcase }}/parameters.tfvars" ; else opts="" ; fi
          cd testing-framework/terraform/ec2 && terraform init && terraform apply -auto-approve -lock=false $opts -var="testing_ami=${{ matrix.testing_ami }}" -var="aoc_version=${{ needs.release-checking.outputs.version }}" -var="package_s3_bucket=${{ env.RELEASE_S3_BUCKET }}" -var="testcase=../testcases/${{ matrix.testcase }}" -var="ssm_package_name=${{ env.SSM_RELEASE_PACKAGE_NAME }}"
          
      - name: Destroy resources
        if: ${{ always() && steps.s3-release-validation-1.outputs.cache-hit != 'true' }}
        run: |
          cd testing-framework/terraform/ec2 && terraform destroy -auto-approve
          
  s3-release-validation-2:
    runs-on: ubuntu-latest
    needs: [get-testing-suites, release-to-s3, release-checking]
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix: ${{ fromJson(needs.get-testing-suites.outputs.ec2-matrix-2) }}

    steps:
      - uses: actions/checkout@v2

      - name: Cache if success
        id: s3-release-validation-2
        uses: actions/cache@v2
        with:
          path: |
            VERSION
          key: s3-release-validation-2-${{ github.run_id }}-${{ matrix.testcase }}-${{ matrix.testing_ami }}

      - name: Configure AWS Credentials
        if: steps.s3-release-validation-2.outputs.cache-hit != 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: Set up JDK 11
        if: steps.s3-release-validation-2.outputs.cache-hit != 'true'
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Set up terraform
        if: steps.s3-release-validation-2.outputs.cache-hit != 'true'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.10

      - name: Check out testing framework
        if: steps.s3-release-validation-2.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: "${{ env.TESTING_FRAMEWORK_REPO }}"
          path: testing-framework

      - name: Run testing suite on ec2
        if: steps.s3-release-validation-2.outputs.cache-hit != 'true'
        run: |
          if [[ -f testing-framework/terraform/testcases/${{ matrix.testcase }}/parameters.tfvars ]] ; then opts="-var-file=../testcases/${{ matrix.testcase }}/parameters.tfvars" ; else opts="" ; fi
          cd testing-framework/terraform/ec2 && terraform init && terraform apply -auto-approve -lock=false $opts -var="testing_ami=${{ matrix.testing_ami }}" -var="aoc_version=${{ needs.release-checking.outputs.version }}" -var="package_s3_bucket=${{ env.RELEASE_S3_BUCKET }}" -var="testcase=../testcases/${{ matrix.testcase }}" -var="ssm_package_name=${{ env.SSM_RELEASE_PACKAGE_NAME }}"
          
      - name: Destroy resources
        if: ${{ always() && steps.s3-release-validation-2.outputs.cache-hit != 'true' }}
        run: |
          cd testing-framework/terraform/ec2 && terraform destroy -auto-approve
          
  s3-release-validation-3:
    runs-on: ubuntu-latest
    needs: [get-testing-suites, release-to-s3, release-checking]
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix: ${{ fromJson(needs.get-testing-suites.outputs.ec2-matrix-3) }}

    steps:
      - uses: actions/checkout@v2

      - name: Cache if success
        id: s3-release-validation-3
        uses: actions/cache@v2
        with:
          path: |
            VERSION
          key: s3-release-validation-3-${{ github.run_id }}-${{ matrix.testcase }}-${{ matrix.testing_ami }}

      - name: Configure AWS Credentials
        if: steps.s3-release-validation-3.outputs.cache-hit != 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: Set up JDK 11
        if: steps.s3-release-validation-3.outputs.cache-hit != 'true'
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Set up terraform
        if: steps.s3-release-validation-3.outputs.cache-hit != 'true'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.10

      - name: Check out testing framework
        if: steps.s3-release-validation-3.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: "${{ env.TESTING_FRAMEWORK_REPO }}"
          path: testing-framework

      - name: Run testing suite on ec2
        if: steps.s3-release-validation-3.outputs.cache-hit != 'true'
        run: |
          if [[ -f testing-framework/terraform/testcases/${{ matrix.testcase }}/parameters.tfvars ]] ; then opts="-var-file=../testcases/${{ matrix.testcase }}/parameters.tfvars" ; else opts="" ; fi
          cd testing-framework/terraform/ec2 && terraform init && terraform apply -auto-approve -lock=false $opts -var="testing_ami=${{ matrix.testing_ami }}" -var="aoc_version=${{ needs.release-checking.outputs.version }}" -var="package_s3_bucket=${{ env.RELEASE_S3_BUCKET }}" -var="testcase=../testcases/${{ matrix.testcase }}" -var="ssm_package_name=${{ env.SSM_RELEASE_PACKAGE_NAME }}"
          
      - name: Destroy resources
        if: ${{ always() && steps.s3-release-validation-3.outputs.cache-hit != 'true' }}
        run: |
          cd testing-framework/terraform/ec2 && terraform destroy -auto-approve
          
  release-version-image:
    runs-on: ubuntu-latest
    needs: [release-checking]
    steps:
      - uses: actions/checkout@v2


      - name: Restore cached packages
        uses: actions/cache@v2
        with:
          key: "${{ env.PACKAGE_CACHE_KEY }}"
          path: "${{ env.PACKAGING_ROOT }}"

      - name: Login to Public Release ECR
        id: login-ecr
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.RELEASE_KEY_ID }}
          password: ${{ secrets.RELEASE_SECRET }}
        env:
          AWS_REGION: us-east-1

      - name: Pull image from integration test ECR and Upload to public release ECR
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: public.ecr.aws/${{ env.ECR_REPO_INTEGRATION_TEST }}:${{ needs.release-checking.outputs.testing_version }}
          dst: public.ecr.aws/${{ env.ECR_REPO }}:${{ needs.release-checking.outputs.version }}

  release-validation-ecs:
    runs-on: ubuntu-latest
    needs: [get-testing-suites, release-version-image, release-checking]
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix: ${{ fromJson(needs.get-testing-suites.outputs.ecs-matrix) }}
    
    steps:
      - uses: actions/checkout@v2

      - name: Cache if success
        id: release-validation-ecs
        uses: actions/cache@v2
        with:
          path: |
            VERSION
          key: release-validation-ecs-${{ github.run_id }}-${{ matrix.testcase }}-${{ matrix.launch_type }}

      - name: Configure AWS Credentials
        if: steps.release-validation-ecs.outputs.cache-hit != 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
          
      - name: Set up JDK 11
        if: steps.release-validation-ecs.outputs.cache-hit != 'true'
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      
      - name: Set up terraform
        if: steps.release-validation-ecs.outputs.cache-hit != 'true'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.10
      
      - name: Check out testing framework
        if: steps.release-validation-ecs.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: "${{ env.TESTING_FRAMEWORK_REPO }}"
          path: testing-framework
          
      - name: Run testing suite on ecs
        if: steps.release-validation-ecs.outputs.cache-hit != 'true'
        run: |
          if [[ -f testing-framework/terraform/testcases/${{ matrix.testcase }}/parameters.tfvars ]] ; then opts="-var-file=../testcases/${{ matrix.testcase }}/parameters.tfvars" ; else opts="" ; fi
          cd testing-framework/terraform/ecs && terraform init && terraform apply -auto-approve -lock=false $opts -var="ecs_launch_type=${{ matrix.launch_type }}" -var="aoc_version=${{ needs.release-checking.outputs.version }}" -var="aoc_image_repo=$IMAGE_LINK" -var="testcase=../testcases/${{ matrix.testcase }}"
                    
      - name: Destroy resources
        if: ${{ always() && steps.release-validation-ecs.outputs.cache-hit != 'true' }}
        run: |
          cd testing-framework/terraform/ecs && terraform destroy -auto-approve           
                  
  release-validation-eks:
    runs-on: ubuntu-latest
    needs: [get-testing-suites, release-version-image, release-checking]
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix: ${{ fromJson(needs.get-testing-suites.outputs.eks-matrix) }}
    
    steps:
      - uses: actions/checkout@v2

      - name: Cache if success
        id: release-validation-eks
        uses: actions/cache@v2
        with:
          path: |
            VERSION
          key: release-validation-eks-${{ github.run_id }}-${{ matrix.testcase }}

      - name: Configure AWS Credentials
        if: steps.release-validation-eks.outputs.cache-hit != 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
          
      - name: Set up JDK 11
        if: steps.release-validation-eks.outputs.cache-hit != 'true'
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      
      - name: Set up terraform
        if: steps.release-validation-eks.outputs.cache-hit != 'true'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.10
      
      - name: Check out testing framework
        if: steps.release-validation-eks.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: "${{ env.TESTING_FRAMEWORK_REPO }}"
          path: testing-framework
      
      - name: Run testing suite on eks
        if: steps.release-validation-eks.outputs.cache-hit != 'true'
        run: |
          if [[ -f testing-framework/terraform/testcases/${{ matrix.testcase }}/parameters.tfvars ]] ; then opts="-var-file=../testcases/${{ matrix.testcase }}/parameters.tfvars" ; else opts="" ; fi
          cd testing-framework/terraform/eks && terraform init && terraform apply -auto-approve -lock=false $opts -var="aoc_version=${{ needs.release-checking.outputs.version }}" -var="aoc_image_repo=$IMAGE_LINK" -var="testcase=../testcases/${{ matrix.testcase }}"
          
      - name: Destroy resources
        if: ${{ always() && steps.release-validation-eks.outputs.cache-hit != 'true' }}
        run: |
          cd testing-framework/terraform/eks && terraform destroy -auto-approve

  delete-images-binaries-if-fail:
    runs-on: ubuntu-latest
    if: failure()
    needs: [s3-release-validation-1, s3-release-validation-2, s3-release-validation-3,release-validation-ecs, release-validation-eks, release-checking]
    steps:
      #Since the tools in workflow are always up-to-date with the github workflow, we don't need to use the tools in workflows from the commited sha
      #but using the tools in workflows from the branch triggered with workflow_dispatch.
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.RELEASE_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RELEASE_SECRET }}
          aws-region: us-west-2

      - name: Delete binaries from s3
        run: version=${{ needs.release-checking.outputs.version }} bash tools/release/image-binary-release/delete-s3-release.sh

      - name: Delete version image from ecr
        run: |
          aws ecr-public batch-delete-image --repository-name $IMAGE_NAME --image-ids imageTag=${{ needs.release-checking.outputs.version }} --region us-east-1


  release-latest-image:
    runs-on: ubuntu-latest
    needs: [s3-release-validation-1, s3-release-validation-2, s3-release-validation-3,release-validation-ecs, release-validation-eks, release-checking]
    steps:
      #Since the tools in workflow are always up-to-date with the github workflow, we don't need to use the tools in workflows from the commited sha
      #but using the tools in workflows from the branch triggered with workflow_dispatch.
      - uses: actions/checkout@v2

      - name: Cache if success
        id: release-latest-image
        uses: actions/cache@v2
        with:
          path: |
            VERSION
          key: release-latest-image-${{ github.run_id }}

      - name: Compare version with Dockerhub latest
        id: version
        if: steps.release-latest-image.outputs.cache-hit != 'true'
        run: |
          TAG="${{ needs.release-checking.outputs.version }}"
          TARGET_VERSION=$TAG bash tools/workflow/docker-version-compare.sh

      - name: Login Dockerhub
        uses: docker/login-action@v1
        if: steps.release-latest-image.outputs.cache-hit != 'true'
        with:
          username: "${{ secrets.DOCKERHUB_RELEASE_USERNAME }}"
          password: "${{ secrets.DOCKERHUB_RELEASE_TOKEN }}"

      - name: Login to Public Release ECR
        id: login-ecr
        if: ${{ steps.release-latest-image.outputs.cache-hit != 'true' && steps.version.outputs.any-update == 'true' }}
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.RELEASE_KEY_ID }}
          password: ${{ secrets.RELEASE_SECRET }}
        env:
          AWS_REGION: us-east-1

      - name: Pull image from integration test ECR, tag as latest and push to public release ECR and DockerHub
        if: ${{ steps.release-latest-image.outputs.cache-hit != 'true'  && steps.version.outputs.any-update == 'true' }}
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: public.ecr.aws/${{ env.ECR_REPO }}:${{ needs.release-checking.outputs.version }}
          dst: |
            public.ecr.aws/${{ env.ECR_REPO }}:latest
            ${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest

      - name: Pull image from integration test ECR, tag with input version and push to DockerHub
        uses: akhilerm/tag-push-action@v2.0.0
        if: steps.release-latest-image.outputs.cache-hit != 'true'
        with:
          src: public.ecr.aws/${{ env.ECR_REPO }}:${{ needs.release-checking.outputs.version }}
          dst: ${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ needs.release-checking.outputs.version }}

      - name: Release adot operator
        if: ${{ steps.release-latest-image.outputs.cache-hit != 'true' && (steps.version.outputs.major-update == 'true' || steps.version.outputs.minor-update == 'true') }}
        run: cd tools/release/adot-operator-images-mirror && go run ./

  clean-ssm-package:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ s3-release-validation-1, s3-release-validation-2, s3-release-validation-3, release-checking ]
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix: ${{fromJson(needs.get-release-region.outputs.region-matrix)}}
    steps:
      #Delete ssm package and binaries/artifacts which is created on s3 bucket for validation test regardless of these two scenarios:
      #-if the validation test failed, then we will delete the SSM package since we don't want to roll out the unstable version
      #-if the validation successes, then we will trigger the release SSM package workflow to replace all of this with the appropriate region
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.RELEASE_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RELEASE_SECRET }}
          aws-region: ${{ matrix.region }}

      - name: Restore cached packages
        uses: actions/cache@v2
        with:
          key: "${{ env.PACKAGE_CACHE_KEY }}"
          path: "${{ env.PACKAGING_ROOT }}"

      - name: Clean up SSM release package created for validation testing
        if: steps.cache_packages.outputs.cache-hit == 'true'
        run: |
          aws ssm describe-document --name ${SSM_RELEASE_PACKAGE_NAME} --version-name ${{ needs.release-checking.outputs.version }} >/dev/null 2>&1 && \
              aws ssm delete-document --name ${SSM_RELEASE_PACKAGE_NAME} --version-name ${{ needs.release-checking.outputs.version }}

      - name: Delete s3 bucket linked to SSM release package created for validation testing
        if: steps.cache_packages.outputs.cache-hit == 'true'
        run: aws s3 rm s3://${{ env.SSM_RELEASE_S3_BUCKET }}/ssmfile/${{ needs.release-checking.outputs.version }} --recursive

  release-to-github:
    runs-on: ubuntu-latest
    needs: [ s3-release-validation-1, s3-release-validation-2, s3-release-validation-3,release-validation-ecs, release-validation-eks, release-checking, clean-ssm-package ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.sha }}

      - name: Generate release-note
        run: sh tools/release/generate-release-note.sh

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ needs.release-checking.outputs.version }}
          commitish: ${{ github.event.inputs.sha }}
          release_name: Release ${{ needs.release-checking.outputs.version }}
          body_path: release-note
          draft: true
          prerelease: true

      - name: Trigger SSM package build and public
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: release SSM package
          token: ${{ secrets.REPO_WRITE_ACCESS_TOKEN }}
          inputs: '{ "version": "${{ needs.release-checking.outputs.version }}", "sha": "${{ github.event.inputs.sha }}", "public": "true", "pkgname": "${{ env.SSM_RELEASE_PACKAGE_NAME }}" }'
